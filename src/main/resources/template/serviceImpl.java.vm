package ${package}.${secondModuleName};

/**
import ${package}.${className}.${className}Model;
import ${package}.${className}.${className}Mapper;
import ${package}.${className}.${className}Service;
*/

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.cloud.util.BeanConvertUtils;
import com.cloud.util.page.PageInfo;
import com.cloud.util.page.PageQuery;
import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

import lombok.extern.slf4j.Slf4j;

/**
 * <p>
 * ${comments} 服务实现类
 * </p>
 
 *
 * @author ${author}
 * @date  ${datetime}
 */
@Slf4j
@Service
public class ${className}ServiceImpl implements I${className}Service  {


	  @Autowired
	  private ${className}Mapper ${secondModuleName}Mapper;
  
  
     /**
	   * 新增
	   * @param ${className}Model
	   * @return long
	 */
	  @Override
	  public long save(${className}BOS ${secondModuleName}BOS) throws Exception{
	  	${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOS, ${className}Model.class);
		int count = this.${secondModuleName}Mapper.save(${secondModuleName}Model);
	    return ${secondModuleName}Model.get${pk.attrName}();
	  }
  
	   /**
		 *批量新增
		 * @param List<${className}BOS>
		 * @return	int
		*/
	  @Override
	  public int saveList(List<${className}BOS> list${className}BOS) throws Exception {
	  	List<${className}Model> list${className}Model = BeanConvertUtils.convertList(list${className}BOS, ${className}Model.class);
		int count = this.${secondModuleName}Mapper.saveList(list${className}Model);
	    return count;
	  }

  
  
  	/**
	   *查询详情
	   * @param ${className}BOQ
	   * @return ${className}VO
	   */
	@Override
	public ${className}VO queryDetail(${className}BOQ ${secondModuleName}BOQ) throws Exception{
		${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOQ, ${className}Model.class);
		${secondModuleName}Model = this.${secondModuleName}Mapper.queryDetail(${secondModuleName}Model);
		return BeanConvertUtils.convert(${secondModuleName}Model, ${className}VO.class);
	}
  
	/**
	 * 
	 * @param ${className}BOQ
	 * @return	List<${className}VO>
	 * ${table.JavaName}
	 */
	@Override
	public List<${className}VO> queryList(${className}BOQ ${secondModuleName}BOQ) throws Exception{
		${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOQ, ${className}Model.class);
		List<${className}Model> list${className}Model = this.${secondModuleName}Mapper.queryList(${secondModuleName}Model);
		return  BeanConvertUtils.convertList(list${className}Model, ${className}VO.class);
	}
	  
	
	/**
	 * 
	 * @param ${className}BOQP
	 * @param page
	 * @return PageQuery<${className}VO>
	 */
	@Override
	public PageQuery<${className}VO> queryListByPage(${className}BOQP ${secondModuleName}BOQP,PageInfo page) throws Exception{
		${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOQP, ${className}Model.class);
		PageHelper.startPage(page.getCurrPage(), page.getPageSize(), page.getOrderby());
		Page<${className}Model> queryListByPage = this.${secondModuleName}Mapper.queryListByPage(${secondModuleName}Model);
		return  new PageQuery(queryListByPage, ${className}VO.class);
	}
	
	
	  
	/**
	 *
	 * @param ${className}BOU
	 * @return int
	 */
	@Override
	public int update(${className}BOU ${secondModuleName}BOU) throws Exception{
		${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOU, ${className}Model.class);
		return this.${secondModuleName}Mapper.update(${secondModuleName}Model);
	}
	
	
	/**
	 *
	 * @param List<${className}BOU>
	 * @return int
	 */
	@Override
	public int updateList(List<${className}BOU> list${className}BOU) throws Exception{
		List<${className}Model> list${className}Model = BeanConvertUtils.convertList(list${className}BOU, ${className}Model.class);
		return this.${secondModuleName}Mapper.updateList(list${className}Model);
	}
	
	  
	 /**
	  * 
	  * @param ${className}BOD
	  * @return int
	  */
	  @Override
	public int delete(${className}BOD ${secondModuleName}BOD) throws Exception{
		${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOD, ${className}Model.class);
		return this.${secondModuleName}Mapper.delete(${secondModuleName}Model);
	}
	
	/**
	  * 
	  * @param ${className}BOQ
	  * @return Long
	  */
	 @Override
	public Long queryCount(${className}BOQ ${secondModuleName}BOQ) throws Exception{
		${className}Model ${secondModuleName}Model = BeanConvertUtils.convert(${secondModuleName}BOQ, ${className}Model.class);
		return this.${secondModuleName}Mapper.queryCount(${secondModuleName}Model);
	}


	
}
